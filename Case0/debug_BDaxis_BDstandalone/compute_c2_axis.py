import numpy as np
from scipy.interpolate import interp1d

def rotate(xo, yo, xp, yp, angle):
    ## Rotate a point clockwise by a given angle around a given origin.
    # angle *= -1.
    qx = xo + np.cos(angle) * (xp - xo) - np.sin(angle) * (yp - yo)
    qy = yo + np.sin(angle) * (xp - xo) + np.cos(angle) * (yp - yo)
    return qx, qy

chord = np.array([5.2       , 5.20828005, 5.23571469, 5.28893862, 5.36058795, 5.44329878, 5.55102411, 5.65014432, 5.71096418, 5.75211103, 5.76723724, 5.75506678, 5.70234411, 5.60088003, 5.46304002, 5.3095475 , 5.14869368, 4.9910429 , 4.84975292, 4.72760777, 4.60473787, 4.48205669, 4.3737561 , 4.26730363, 4.16297538, 4.06170644, 3.96352943, 3.86694602, 3.77300336, 3.68131699, 3.5907322 , 3.50078797, 3.41511762, 3.32885872, 3.2415382 , 3.15507474, 3.0695283 , 2.98396387, 2.89800415, 2.76822223, 2.67957286, 2.58823759, 2.49392198, 2.39735698, 2.29857483, 2.19767487, 2.09474886, 1.9897964 , 1.84812359, 0.5       ])
twist_deg = np.array([ 1.55945530e+01,  1.55910503e+01,  1.54287794e+01,  1.49891344e+01,  1.43263482e+01,  1.34946539e+01,  1.23001292e+01,  1.10323482e+01,  1.00833615e+01,  9.20005979e+00,  8.42919140e+00,  7.77671331e+00,  7.18285752e+00,  6.52709559e+00,  5.89492482e+00,  5.29431955e+00,  4.73441485e+00,  4.20048114e+00,  3.72583231e+00,  3.30696491e+00,  2.91997575e+00,  2.56099687e+00,  2.26198609e+00,  1.98029436e+00,  1.71360855e+00,  1.45795580e+00,  1.21557781e+00,  9.87903870e-01,  7.75107871e-01,  5.75425633e-01,  3.80166842e-01,  1.86025579e-01, -1.93061844e-03, -2.03358901e-01, -4.25226027e-01, -6.83468685e-01, -9.81862427e-01, -1.28327693e+00, -1.57511808e+00, -1.93658202e+00, -2.10844348e+00, -2.16636223e+00, -2.17657860e+00, -2.16109257e+00, -2.11854492e+00, -2.04889635e+00, -1.95145157e+00, -1.81514432e+00, -1.56791603e+00, -1.24238771e+00])
pitch_axis = np.array([0.50454545, 0.49036395, 0.47344581, 0.45517783, 0.4361812 , 0.41739689, 0.39572662, 0.3755288 , 0.36112731, 0.34875011, 0.33844986, 0.33036798, 0.32401219, 0.31864655, 0.31442891, 0.31121158, 0.30854841, 0.30617887, 0.30373862, 0.30095659, 0.29800464, 0.29507981, 0.2928515 , 0.29098791, 0.28944638, 0.28838995, 0.28782327, 0.28785075, 0.28798596, 0.28875949, 0.28991267, 0.29156812, 0.29342497, 0.29556568, 0.2979817 , 0.30059659, 0.30340667, 0.30632396, 0.30930523, 0.31363636, 0.31679923, 0.32035628, 0.3244136 , 0.3288134 , 0.3335232 , 0.33846714, 0.34374604, 0.34950037, 0.35826815, 0.36818182])
kp_yr = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
kp_xr = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
#kp_xr = np.array([ 0.        ,  0.01792725,  0.04109499,  0.06941333,  0.10093956,  0.13373096,  0.17353974,  0.20849545,  0.22951355,  0.24384433,  0.2498132 ,  0.25028812,  0.24939987,  0.24749488,  0.24464045,  0.24098808,  0.23649249,  0.23152947,  0.22318132,  0.20501056,  0.17342012,  0.12433481,  0.0723494 ,  0.01380893, -0.0496566 , -0.11436011, -0.18380668, -0.26957005, -0.36837313, -0.48160502, -0.60358933, -0.73337356, -0.86020268, -0.9895744 , -1.11973647, -1.25678493, -1.40160252, -1.55315116, -1.71102313, -1.95464584, -2.12168022, -2.2924731 , -2.46707492, -2.64798028, -2.83493662, -3.0279676 , -3.22647557, -3.43073969, -3.71105556, -4.        ])

twist_rad = np.deg2rad(twist_deg)
# Get the absolute offset between mid chord and pitch axis (rotation center)
ch_offset = chord * (0.5 - pitch_axis)
# Rotate it by the twist
x , y = rotate(0., 0., 0., ch_offset, -twist_rad)
kp_xr += x
kp_yr += y

np.savetxt('/Users/pbortolo/work/2_openfast/stability/BDstab/IEA15/OF3p0/debug_BDaxis_BDstandalone/temp.dat', np.array([kp_xr, kp_yr]).T)
